1. Monotonic Decreasing Queue.
Use monotonic queue, if current height is greater means this is right bound to top element and all top which are smaller than this.
so we calculate answer for these. And to calculate left bound that is maintained in queue, so water will be minimum of both bound and minus the height of considering 
element so multilpy with width, you will get answer.

class Solution {
public:
    int trap(vector<int>& height) {
        stack<int> s;
        int ans = 0, n = height.size();
        for(int i = 0 ; i < n ; i++){
            while(!s.empty() && height[s.top()] <= height[i]){
                int h = height[s.top()];
                s.pop();
                if(s.empty()) continue;
                int idx = s.top();
                ans  += (min(height[i] , height[s.top()]) - h)*(i - idx- 1);
            }
            s.push(i);
        }
        return ans;
    }
    
};
